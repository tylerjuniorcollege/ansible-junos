
---

- name: Playbook for applying software Master or Backup RE or to Both REs

  hosts: Junos_Test

  gather_facts: no

  connection: local



  roles:

    - Juniper.junos





  vars:

    OS_version: 20.2R1-S2.1
    OS_package: junos-arm-32-20.2R1-S2.1.tgz
    pkg_dir: /var/lib/awx/custom-venv/junos/Firmware
    valid_tags: ['apply_to_backup', 'apply_to_master', 'apply_to_both']
    actions_apply_to_backup: ['Abort for Single RE devices', 'Copy the package to device', 'Delete old package files from both routing engines if any.', 'Perform request system storage cleanup', 'Apply software to backup RE', 'Reboot']
    actions_apply_to_master: ['Copy the package to device', 'Delete old package files from both routing engines if any.', 'Perform request system storage cleanup', 'Apply software to master RE', 'Reboot']
    actions_apply_to_both: ['Abort for Single RE devices', 'Copy the package to device', 'Delete old package files from both routing engines if any.', 'Perform request system storage cleanup', 'Apply software to both REs', 'Reboot']

  

  

  pre_tasks:



    - include_tasks: tasks/set_provider_details.yml

      when: run_mode == 'cli'

      tags:

        - always





    - block:

        - name: User Confirmation - CLI Mode

          pause:

            prompt: "\e[32m\e[1m\n-------------------\nPlaybook Details: \n-------------------\n\nDevices:\n--------\n\t{{ hostvars.keys() | sort | join('\n\t') }}\n\nMajor Actions:\n--------------\n\t=> {% if hostvars[inventory_hostname]['ansible_run_tags'][0] == 'apply_to_backup' %}{{  actions_apply_to_backup| join('\n\t=> ') }}{% elif hostvars[inventory_hostname]['ansible_run_tags'][0] == 'apply_to_master' %}{{  actions_apply_to_master| join('\n\t=> ') }}{% elif hostvars[inventory_hostname]['ansible_run_tags'][0] == 'apply_to_both' %}{{  actions_apply_to_both| join('\n\t=> ') }}{% endif %}\n\n\n\e[5mDo you want to continue? (YES/NO)"

          register: user_confirmation

          run_once: yes








  tasks:

    - name: Identify the Backup RE

      set_fact:

        bkp_re: "{% if ansible_facts.junos.RE0.mastership_state == 'backup' %}re0{% elif  ansible_facts.junos.RE1.mastership_state == 'backup' %}re1{% else %}{% endif %}"

      tags:

        - never

        - apply_to_backup



    - name: Set variables for Master RE

      set_fact:

          jjsc_kwargs_master: "{ {% if ansible_facts.junos.master == 'RE0' %}'re0': true{% elif ansible_facts.junos.master == 'RE1' %}'re1': true{% endif %} }"

      tags: 

        - never

        - apply_to_master



    - name: Set variables for Backup RE

      set_fact:

        jjsc_kwargs_bkp: "{ {% if bkp_re == 're0' %}'re0': true{% elif  bkp_re == 're1' %}'re1': true{% endif %} }"  

      tags:

        - never

        - apply_to_backup




    - name: Install package on Master RE

      juniper_junos_software_custom:

        all_re: no

        kwargs: "{{ jjsc_kwargs_master }}"

        local_package: "{{ resp_download_pkg.dest }}"

        validate: no

        reboot: yes

        reboot_pause: 50

        timeout: 1200

        provider: "{{ provider_details }}"

      tags:

        - never

        - apply_to_master



    - name: Install package on Backup RE

      juniper_junos_software_custom:

        all_re: no

        kwargs: "{{ jjsc_kwargs_bkp }}"
        version: "{{ OS_version }}"
        local_package: "{{ pkg_dir }}/{{ OS_package }}"
        force_host: yes
        reboot: yes
        reboot_pause: 50
        timeout: 1200
      
      tags:

        - never

        - apply_to_backup



    - name: Install package on Both REs

      juniper_junos_software_custom:

        all_re: yes
        version: "{{ OS_version }}"
        local_package: "{{ pkg_dir }}/{{ OS_package }}"
        force_host: yes
        reboot: yes
        reboot_pause: 50
        timeout: 1200

      tags:

        - never

        - apply_to_both
